// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo para las tiendas (cada cliente)
model Store {
  id          String   @id @default(cuid())
  slug        String   @unique // publica.com.ar/[slug]
  name        String
  logoUrl     String?  // URL de Cloudinary
  contactInfo String?  // Teléfono, email, etc.
  instagramUrl String? // URL completa de Instagram
  whatsappUrl  String? // URL completa de WhatsApp
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  auth        StoreAuth?
  cards       Card[]

  @@map("stores")
}

// Modelo para autenticación de cada tienda
model StoreAuth {
  id           String   @id @default(cuid())
  storeId      String   @unique
  email        String   @unique
  passwordHash String
  isVerified   Boolean  @default(false)
  verificationToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relaciones
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("store_auth")
}

// Modelo para las cards/productos
model Card {
  id           String   @id @default(cuid())
  storeId      String
  title        String
  description  String   @db.Text
  image1Url    String?  // URLs de Cloudinary
  image2Url    String?
  image3Url    String?
  orderPosition Int     @default(0) // Para ordenar las cards
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relaciones
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("cards")
}

// Modelo para tokens de verificación de email
model VerificationToken {
  id         String   @id @default(cuid())
  email      String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([email, token])
  @@map("verification_tokens")
}